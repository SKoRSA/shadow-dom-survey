"use strict";(self.webpackChunkshadow_dom_survey_docs=self.webpackChunkshadow_dom_survey_docs||[]).push([[426],{1298:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>i,default:()=>c,frontMatter:()=>a,metadata:()=>s,toc:()=>u});var r=t(8168),o=(t(6540),t(5680));const a={sidebar_position:5},i="Dropdown Questions",s={unversionedId:"question-types/dropdown",id:"question-types/dropdown",title:"Dropdown Questions",description:"Dropdown questions provide a space-efficient way to present many options through a select menu. They are ideal for questions with many possible answers or when you want to save space in your survey layout.",source:"@site/docs/question-types/dropdown.md",sourceDirName:"question-types",slug:"/question-types/dropdown",permalink:"/shadow-dom-survey/docs/question-types/dropdown",draft:!1,editUrl:"https://github.com/SKoRSA/shadow-dom-survey/edit/main/docs/docs/question-types/dropdown.md",tags:[],version:"current",sidebarPosition:5,frontMatter:{sidebar_position:5},sidebar:"docs",previous:{title:"Multiple Choice Questions",permalink:"/shadow-dom-survey/docs/question-types/multiple-choice"},next:{title:"Rating Questions",permalink:"/shadow-dom-survey/docs/question-types/rating"}},l={},u=[{value:"Features",id:"features",level:2},{value:"Data Structure",id:"data-structure",level:2},{value:"Builder Configuration",id:"builder-configuration",level:2},{value:"Reader Display",id:"reader-display",level:2},{value:"Response Format",id:"response-format",level:2},{value:"Implementation Example",id:"implementation-example",level:2},{value:"Setting Up in the Builder",id:"setting-up-in-the-builder",level:3},{value:"Setting Up the Reader",id:"setting-up-the-reader",level:3},{value:"HTML Structure (Inside Shadow DOM)",id:"html-structure-inside-shadow-dom",level:3},{value:"Best Practices",id:"best-practices",level:2}],d={toc:u},p="wrapper";function c({components:e,...n}){return(0,o.yg)(p,(0,r.A)({},d,n,{components:e,mdxType:"MDXLayout"}),(0,o.yg)("h1",{id:"dropdown-questions"},"Dropdown Questions"),(0,o.yg)("p",null,"Dropdown questions provide a space-efficient way to present many options through a select menu. They are ideal for questions with many possible answers or when you want to save space in your survey layout."),(0,o.yg)("h2",{id:"features"},"Features"),(0,o.yg)("ul",null,(0,o.yg)("li",{parentName:"ul"},"Compact select menu interface"),(0,o.yg)("li",{parentName:"ul"},"Customizable option labels"),(0,o.yg)("li",{parentName:"ul"},"Required or optional setting"),(0,o.yg)("li",{parentName:"ul"},"Custom placeholder text"),(0,o.yg)("li",{parentName:"ul"},"Support for long option lists")),(0,o.yg)("h2",{id:"data-structure"},"Data Structure"),(0,o.yg)("p",null,"When creating or using this question type with the Shadow DOM Survey components, the data structure is:"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-javascript"},'{\n  "surveyId": "uniqueId123",\n  "title": "Global Demographics Survey",\n  "description": "Help us understand our audience better",\n  "createdAt": "2023-07-10T15:30:45.123Z",\n  "updatedAt": "2023-07-10T16:45:12.456Z",\n  "question": {\n    "type": "dropdown",\n    "text": "In which country do you currently reside?",\n    "settings": {\n      "required": true,\n      "placeholder": "Select a country"\n    },\n    "options": [\n      "United States",\n      "United Kingdom",\n      "Canada",\n      "Australia",\n      "Germany"\n      // ... more countries\n    ]\n  }\n}\n')),(0,o.yg)("h2",{id:"builder-configuration"},"Builder Configuration"),(0,o.yg)("p",null,"In the Survey Builder interface, you can configure dropdown questions with these options:"),(0,o.yg)("ol",null,(0,o.yg)("li",{parentName:"ol"},(0,o.yg)("strong",{parentName:"li"},"Question Text"),": The main question being asked (required)"),(0,o.yg)("li",{parentName:"ol"},(0,o.yg)("strong",{parentName:"li"},"Required"),": Toggle if an answer is mandatory"),(0,o.yg)("li",{parentName:"ol"},(0,o.yg)("strong",{parentName:"li"},"Options"),": Add, remove, and edit the available choices")),(0,o.yg)("p",null,"The builder interface provides:"),(0,o.yg)("ul",null,(0,o.yg)("li",{parentName:"ul"},"Button to add new options"),(0,o.yg)("li",{parentName:"ul"},"Remove buttons for each existing option"),(0,o.yg)("li",{parentName:"ul"},"Drag handles to reorder options (where supported)")),(0,o.yg)("h2",{id:"reader-display"},"Reader Display"),(0,o.yg)("p",null,"In the Survey Reader, dropdown questions display as:"),(0,o.yg)("ul",null,(0,o.yg)("li",{parentName:"ul"},"Question text"),(0,o.yg)("li",{parentName:"ul"},"A dropdown select menu"),(0,o.yg)("li",{parentName:"ul"},"Validation message if required and not answered")),(0,o.yg)("h2",{id:"response-format"},"Response Format"),(0,o.yg)("p",null,"The response data for dropdown questions is structured as follows:"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-javascript"},'{\n  "surveyId": "survey123",\n  "submittedAt": "2023-07-15T14:32:45.123Z",\n  "questionType": "dropdown",\n  "questionText": "In which country do you currently reside?",\n  "response": "Canada"\n}\n')),(0,o.yg)("h2",{id:"implementation-example"},"Implementation Example"),(0,o.yg)("h3",{id:"setting-up-in-the-builder"},"Setting Up in the Builder"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-javascript"},'// Create a new builder instance\nconst builder = new SurveyBuilder("#surveyBuilder", {\n  isEnglish: true,\n  onSave: async (data) => {\n    console.log("Survey saved:", data);\n    return data;\n  },\n});\n\n// Create a dropdown question programmatically\nbuilder.setData({\n  surveyId: "survey_" + Date.now().toString(36),\n  title: "Education Survey",\n  description: "Help us understand our audience better",\n  createdAt: new Date().toISOString(),\n  updatedAt: new Date().toISOString(),\n  question: {\n    type: "dropdown",\n    text: "What is your highest level of education?",\n    settings: {\n      required: true,\n      placeholder: "Select your education level"\n    },\n    options: [\n      "High school",\n      "Some college",\n      "Associate\'s degree",\n      "Bachelor\'s degree",\n      "Master\'s degree",\n      "Doctoral degree",\n      "Professional degree",\n    ],\n  },\n});\n')),(0,o.yg)("h3",{id:"setting-up-the-reader"},"Setting Up the Reader"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-javascript"},'// Create a new reader instance with the dropdown survey data\nconst reader = new SurveyReader("#surveyReader", {\n  isEnglish: true,\n  surveyData: {\n    surveyId: "survey_" + Date.now().toString(36),\n    title: "Education Survey",\n    description: "Help us understand our audience better",\n    question: {\n      type: "dropdown",\n      text: "What is your highest level of education?",\n      settings: {\n        required: true,\n        placeholder: "Select your education level"\n      },\n      options: [\n        "High school",\n        "Some college",\n        "Associate\'s degree",\n        "Bachelor\'s degree",\n        "Master\'s degree",\n        "Doctoral degree",\n        "Professional degree",\n      ],\n    },\n  },\n  onSubmit: async (responses) => {\n    console.log("Survey submitted:", responses);\n    return responses;\n  },\n});\n\n// To update the reader with different data, you must destroy and recreate it\nreader.destroy();\nconst updatedReader = new SurveyReader("#surveyReader", {\n  isEnglish: true,\n  surveyData: newDropdownSurveyData,\n  onSubmit: async (responses) => {\n    console.log("Updated survey submitted:", responses);\n    return responses;\n  },\n});\n')),(0,o.yg)("h3",{id:"html-structure-inside-shadow-dom"},"HTML Structure (Inside Shadow DOM)"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-html"},'<div class="question">\n  <div class="question-text">\n    What is your highest level of education?<span class="required">*</span>\n  </div>\n  <div class="select-wrapper">\n    <select id="sr-response-select" required>\n      <option value="" disabled selected>Select your education level</option>\n      <option value="0">High school</option>\n      <option value="1">Some college</option>\n      <option value="2">Associate\'s degree</option>\n      <option value="3">Bachelor\'s degree</option>\n      <option value="4">Master\'s degree</option>\n      <option value="5">Doctoral degree</option>\n      <option value="6">Professional degree</option>\n    </select>\n  </div>\n  <div id="sr-question-error" style="display: none;">\n    This question requires an answer\n  </div>\n</div>\n')),(0,o.yg)("h2",{id:"best-practices"},"Best Practices"),(0,o.yg)("ol",null,(0,o.yg)("li",{parentName:"ol"},(0,o.yg)("strong",{parentName:"li"},"Use for long lists"),": Dropdowns are ideal when you have many options (countries, states, etc.)"),(0,o.yg)("li",{parentName:"ol"},(0,o.yg)("strong",{parentName:"li"},"Clear placeholder"),": Set a descriptive placeholder to guide users"),(0,o.yg)("li",{parentName:"ol"},(0,o.yg)("strong",{parentName:"li"},"Logical ordering"),": Arrange options alphabetically or in another logical order"),(0,o.yg)("li",{parentName:"ol"},(0,o.yg)("strong",{parentName:"li"},"Mobile-friendly"),": The component ensures your dropdown works well on mobile devices"),(0,o.yg)("li",{parentName:"ol"},(0,o.yg)("strong",{parentName:"li"},"Appropriate sizing"),": The dropdown is styled to accommodate long option text")))}c.isMDXComponent=!0},5680:(e,n,t)=>{t.d(n,{xA:()=>d,yg:()=>g});var r=t(6540);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,r,o=function(e,n){if(null==e)return{};var t,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var l=r.createContext({}),u=function(e){var n=r.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},d=function(e){var n=u(e.components);return r.createElement(l.Provider,{value:n},e.children)},p="mdxType",c={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},y=r.forwardRef((function(e,n){var t=e.components,o=e.mdxType,a=e.originalType,l=e.parentName,d=s(e,["components","mdxType","originalType","parentName"]),p=u(t),y=o,g=p["".concat(l,".").concat(y)]||p[y]||c[y]||a;return t?r.createElement(g,i(i({ref:n},d),{},{components:t})):r.createElement(g,i({ref:n},d))}));function g(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var a=t.length,i=new Array(a);i[0]=y;var s={};for(var l in n)hasOwnProperty.call(n,l)&&(s[l]=n[l]);s.originalType=e,s[p]="string"==typeof e?e:o,i[1]=s;for(var u=2;u<a;u++)i[u]=t[u];return r.createElement.apply(null,i)}return r.createElement.apply(null,t)}y.displayName="MDXCreateElement"}}]);