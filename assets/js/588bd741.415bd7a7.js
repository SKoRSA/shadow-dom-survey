"use strict";(self.webpackChunkshadow_dom_survey_docs=self.webpackChunkshadow_dom_survey_docs||[]).push([[324],{5680:(e,t,n)=>{n.d(t,{xA:()=>d,yg:()=>g});var r=n(6540);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function s(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?s(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},s=Object.keys(e);for(r=0;r<s.length;r++)n=s[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(r=0;r<s.length;r++)n=s[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=r.createContext({}),u=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},d=function(e){var t=u(e.components);return r.createElement(l.Provider,{value:t},e.children)},p="mdxType",y={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},c=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,s=e.originalType,l=e.parentName,d=i(e,["components","mdxType","originalType","parentName"]),p=u(n),c=a,g=p["".concat(l,".").concat(c)]||p[c]||y[c]||s;return n?r.createElement(g,o(o({ref:t},d),{},{components:n})):r.createElement(g,o({ref:t},d))}));function g(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var s=n.length,o=new Array(s);o[0]=c;var i={};for(var l in t)hasOwnProperty.call(t,l)&&(i[l]=t[l]);i.originalType=e,i[p]="string"==typeof e?e:a,o[1]=i;for(var u=2;u<s;u++)o[u]=n[u];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}c.displayName="MDXCreateElement"},9155:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>y,frontMatter:()=>s,metadata:()=>i,toc:()=>u});var r=n(8168),a=(n(6540),n(5680));const s={sidebar_position:2},o="Quick Start",i={unversionedId:"getting-started/quick-start",id:"getting-started/quick-start",title:"Quick Start",description:"This guide will help you create a functional survey system with the SurveyBuilder and SurveyReader components, following their actual implementations.",source:"@site/docs/getting-started/quick-start.md",sourceDirName:"getting-started",slug:"/getting-started/quick-start",permalink:"/shadow-dom-survey/docs/getting-started/quick-start",draft:!1,editUrl:"https://github.com/SKoRSA/shadow-dom-survey/edit/main/docs/docs/getting-started/quick-start.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"docs",previous:{title:"Installation",permalink:"/shadow-dom-survey/docs/getting-started/installation"},next:{title:"Survey Builder Component",permalink:"/shadow-dom-survey/docs/components/survey-builder"}},l={},u=[{value:"Prerequisites",id:"prerequisites",level:2},{value:"Creating a Complete Survey System",id:"creating-a-complete-survey-system",level:2},{value:"Step 1: Set up the HTML structure",id:"step-1-set-up-the-html-structure",level:3},{value:"Step 2: Create the JavaScript (app.js)",id:"step-2-create-the-javascript-appjs",level:3},{value:"How It Works",id:"how-it-works",level:2},{value:"Creating and Testing a Survey",id:"creating-and-testing-a-survey",level:2},{value:"Using the Builder",id:"using-the-builder",level:3},{value:"Advanced Usage Examples",id:"advanced-usage-examples",level:2},{value:"Example 1: Programmatically Creating a Survey",id:"example-1-programmatically-creating-a-survey",level:3},{value:"Example 2: Integrating with a Backend API",id:"example-2-integrating-with-a-backend-api",level:3},{value:"Example 3: Supporting Multiple Languages",id:"example-3-supporting-multiple-languages",level:3},{value:"Important Implementation Notes",id:"important-implementation-notes",level:2},{value:"What&#39;s Next?",id:"whats-next",level:2},{value:"Troubleshooting",id:"troubleshooting",level:2}],d={toc:u},p="wrapper";function y({components:e,...t}){return(0,a.yg)(p,(0,r.A)({},d,t,{components:e,mdxType:"MDXLayout"}),(0,a.yg)("h1",{id:"quick-start"},"Quick Start"),(0,a.yg)("p",null,"This guide will help you create a functional survey system with the SurveyBuilder and SurveyReader components, following their actual implementations."),(0,a.yg)("h2",{id:"prerequisites"},"Prerequisites"),(0,a.yg)("p",null,"Before you start, make sure you have:"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},"Completed the ",(0,a.yg)("a",{parentName:"li",href:"/shadow-dom-survey/docs/getting-started/installation"},"installation")," of the components"),(0,a.yg)("li",{parentName:"ul"},"Basic knowledge of HTML and JavaScript"),(0,a.yg)("li",{parentName:"ul"},"A modern browser that supports Shadow DOM")),(0,a.yg)("h2",{id:"creating-a-complete-survey-system"},"Creating a Complete Survey System"),(0,a.yg)("h3",{id:"step-1-set-up-the-html-structure"},"Step 1: Set up the HTML structure"),(0,a.yg)("p",null,"Create a basic HTML file with containers for the builder and reader:"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-html"},'<!DOCTYPE html>\n<html lang="en">\n  <head>\n    <meta charset="UTF-8" />\n    <meta name="viewport" content="width=device-width, initial-scale=1.0" />\n    <title>Shadow DOM Survey Example</title>\n    <style>\n      body {\n        font-family: system-ui, -apple-system, sans-serif;\n        max-width: 1200px;\n        margin: 0 auto;\n        padding: 20px;\n      }\n\n      .container {\n        margin-bottom: 40px;\n        border: 1px solid #e0e0e0;\n        padding: 20px;\n        border-radius: 8px;\n        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.05);\n      }\n\n      h2 {\n        color: #333;\n        margin-top: 30px;\n      }\n\n      button {\n        background-color: #4a6cf7;\n        color: white;\n        border: none;\n        padding: 8px 16px;\n        border-radius: 4px;\n        cursor: pointer;\n        margin-top: 10px;\n      }\n\n      button:hover {\n        background-color: #3a5ce7;\n      }\n\n      pre {\n        background: #f5f5f5;\n        padding: 15px;\n        border-radius: 4px;\n        overflow: auto;\n        max-height: 200px;\n      }\n    </style>\n  </head>\n  <body>\n    <h1>Shadow DOM Survey Demo</h1>\n\n    <h2>Survey Builder</h2>\n    <div id="surveyBuilder" class="container"></div>\n\n    <h2>Survey Reader</h2>\n    <div id="surveyReader" class="container"></div>\n\n    <button id="loadReaderBtn">Load Survey in Reader</button>\n    <div>\n      <h3>Current Survey Data:</h3>\n      <pre id="dataOutput">No data yet</pre>\n    </div>\n\n    \x3c!-- Include Shadow DOM Survey Components --\x3e\n    <script src="builder-embed.js"><\/script>\n    <script src="reader-embed.js"><\/script>\n    <script src="app.js"><\/script>\n  </body>\n</html>\n')),(0,a.yg)("h3",{id:"step-2-create-the-javascript-appjs"},"Step 2: Create the JavaScript (app.js)"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-javascript"},'// Initialize the survey builder\nlet builder = new SurveyBuilder("#surveyBuilder", {\n  isEnglish: true,\n  onSave: async (data) => {\n    // Store survey data in localStorage\n    localStorage.setItem("mySurvey", JSON.stringify(data));\n\n    // Update the data display\n    document.getElementById("dataOutput").textContent = JSON.stringify(\n      data,\n      null,\n      2\n    );\n\n    console.log("Survey saved:", data);\n    return data;\n  },\n});\n\n// Initialize the survey reader with no data initially\nlet reader = new SurveyReader("#surveyReader", {\n  isEnglish: true,\n  onSubmit: async (responses) => {\n    console.log("Survey submitted:", responses);\n\n    // Store the responses\n    const allResponses = JSON.parse(\n      localStorage.getItem("surveyResponses") || "[]"\n    );\n    allResponses.push(responses);\n    localStorage.setItem("surveyResponses", JSON.stringify(allResponses));\n\n    return responses;\n  },\n  completedTitle: "Thanks for your feedback!",\n  completedMessage: "Your response has been recorded.",\n});\n\n// Load Survey button - Important: We must destroy and recreate the reader\ndocument.getElementById("loadReaderBtn").addEventListener("click", function () {\n  const surveyData = localStorage.getItem("mySurvey");\n\n  if (!surveyData) {\n    alert("Please create and save a survey first!");\n    return;\n  }\n\n  // Step 1: Always destroy the existing reader instance first\n  reader.destroy();\n\n  // Step 2: Create a new reader instance with the survey data\n  reader = new SurveyReader("#surveyReader", {\n    isEnglish: true,\n    surveyData: JSON.parse(surveyData),\n    onSubmit: async (responses) => {\n      console.log("Survey submitted:", responses);\n\n      // Store the responses\n      const allResponses = JSON.parse(\n        localStorage.getItem("surveyResponses") || "[]"\n      );\n      allResponses.push(responses);\n      localStorage.setItem("surveyResponses", JSON.stringify(allResponses));\n\n      return responses;\n    },\n    completedTitle: "Thanks for your feedback!",\n    completedMessage: "Your response has been recorded.",\n  });\n});\n\n// Listen for custom events\ndocument\n  .querySelector("#surveyReader")\n  .addEventListener("survey-submit", (event) => {\n    console.log("Survey submit event received:", event.detail);\n  });\n')),(0,a.yg)("h2",{id:"how-it-works"},"How It Works"),(0,a.yg)("p",null,"This setup creates a simple survey system where:"),(0,a.yg)("ol",null,(0,a.yg)("li",{parentName:"ol"},"The builder lets you create a survey and save it to localStorage"),(0,a.yg)("li",{parentName:"ol"},'The "Load Survey in Reader" button loads the saved survey into the reader'),(0,a.yg)("li",{parentName:"ol"},"The reader displays the survey and collects responses"),(0,a.yg)("li",{parentName:"ol"},"Responses are stored in localStorage")),(0,a.yg)("h2",{id:"creating-and-testing-a-survey"},"Creating and Testing a Survey"),(0,a.yg)("h3",{id:"using-the-builder"},"Using the Builder"),(0,a.yg)("ol",null,(0,a.yg)("li",{parentName:"ol"},(0,a.yg)("p",{parentName:"li"},(0,a.yg)("strong",{parentName:"p"},"Create a survey in the builder:")),(0,a.yg)("ul",{parentName:"li"},(0,a.yg)("li",{parentName:"ul"},'Add a title (e.g., "Customer Feedback")'),(0,a.yg)("li",{parentName:"ul"},'Add a description (e.g., "Please share your thoughts about our service")'),(0,a.yg)("li",{parentName:"ul"},'Select a question type (e.g., "Single Choice")'),(0,a.yg)("li",{parentName:"ul"},'Enter a question (e.g., "How satisfied are you with our service?")'),(0,a.yg)("li",{parentName:"ul"},"Add options for choice-type questions"),(0,a.yg)("li",{parentName:"ul"},"Set the question as required if needed"),(0,a.yg)("li",{parentName:"ul"},'Click "Save" to store the survey'))),(0,a.yg)("li",{parentName:"ol"},(0,a.yg)("p",{parentName:"li"},(0,a.yg)("strong",{parentName:"p"},"Loading into the reader:")),(0,a.yg)("ul",{parentName:"li"},(0,a.yg)("li",{parentName:"ul"},'Click the "Load Survey in Reader" button'),(0,a.yg)("li",{parentName:"ul"},"The survey will appear in the reader component"),(0,a.yg)("li",{parentName:"ul"},'Fill in the survey and click "Submit"'),(0,a.yg)("li",{parentName:"ul"},"See the confirmation message")))),(0,a.yg)("h2",{id:"advanced-usage-examples"},"Advanced Usage Examples"),(0,a.yg)("h3",{id:"example-1-programmatically-creating-a-survey"},"Example 1: Programmatically Creating a Survey"),(0,a.yg)("p",null,"You can create a survey programmatically using the ",(0,a.yg)("inlineCode",{parentName:"p"},"setData")," method of the builder:"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-javascript"},'// Create a survey object\nconst surveyData = {\n  surveyId: "survey_" + Date.now().toString(36),\n  title: "Product Feedback",\n  description: "Please tell us about your experience with our product",\n  createdAt: new Date().toISOString(),\n  updatedAt: new Date().toISOString(),\n  question: {\n    type: "multipleChoice",\n    text: "Which features would you like to see improved?",\n    settings: { required: true },\n    options: [\n      "User Interface",\n      "Performance",\n      "Documentation",\n      "Mobile Support",\n      "Cross-platform Compatibility",\n    ],\n  },\n};\n\n// Load the data into the builder\nbuilder.setData(surveyData);\n\n// Optionally save it programmatically\nbuilder.save();\n')),(0,a.yg)("h3",{id:"example-2-integrating-with-a-backend-api"},"Example 2: Integrating with a Backend API"),(0,a.yg)("p",null,"Here's how to connect the components to a backend API:"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-javascript"},'// Initialize the builder with API integration\nconst builder = new SurveyBuilder("#surveyBuilder", {\n  isEnglish: true,\n  onSave: async (data) => {\n    try {\n      const response = await fetch("/api/surveys", {\n        method: "POST",\n        headers: { "Content-Type": "application/json" },\n        body: JSON.stringify(data),\n      });\n\n      if (!response.ok) {\n        throw new Error("Failed to save survey");\n      }\n\n      const savedData = await response.json();\n      return savedData;\n    } catch (error) {\n      console.error("Error saving survey:", error);\n      return null;\n    }\n  },\n});\n\n// Initialize the reader with API integration\nlet reader = new SurveyReader("#surveyReader", {\n  isEnglish: true,\n  // You can either provide surveyData directly\n  // or use loadSurvey to fetch it:\n  loadSurvey: async () => {\n    try {\n      const response = await fetch("/api/surveys/active");\n      if (!response.ok) {\n        throw new Error("Failed to load survey");\n      }\n      return await response.json();\n    } catch (error) {\n      console.error("Error loading survey:", error);\n      return null;\n    }\n  },\n  onSubmit: async (responses) => {\n    try {\n      const response = await fetch("/api/responses", {\n        method: "POST",\n        headers: { "Content-Type": "application/json" },\n        body: JSON.stringify(responses),\n      });\n\n      return response.ok;\n    } catch (error) {\n      console.error("Error submitting responses:", error);\n      return false;\n    }\n  },\n});\n')),(0,a.yg)("h3",{id:"example-3-supporting-multiple-languages"},"Example 3: Supporting Multiple Languages"),(0,a.yg)("p",null,"To support both English and Arabic interfaces:"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-javascript"},'// Toggle button in your HTML\n// <button id="languageToggle">Switch to Arabic</button>\n\ndocument\n  .getElementById("languageToggle")\n  .addEventListener("click", function () {\n    const isCurrentlyEnglish = this.textContent.includes("Arabic");\n    this.textContent = isCurrentlyEnglish\n      ? "Switch to English"\n      : "Switch to Arabic";\n\n    // Get the current builder data if needed\n    const currentBuilderData = builder.getData();\n\n    // Recreate builder with new language\n    builder.destroy();\n    builder = new SurveyBuilder("#surveyBuilder", {\n      isEnglish: !isCurrentlyEnglish,\n      onSave: async (data) => {\n        localStorage.setItem("mySurvey", JSON.stringify(data));\n        return data;\n      },\n    });\n\n    // Optionally restore builder data\n    if (currentBuilderData) {\n      builder.setData(currentBuilderData);\n    }\n\n    // Recreate reader with new language\n    reader.destroy();\n    reader = new SurveyReader("#surveyReader", {\n      isEnglish: !isCurrentlyEnglish,\n      loadSurvey: async () => {\n        const data = localStorage.getItem("mySurvey");\n        return data ? JSON.parse(data) : null;\n      },\n      onSubmit: async (responses) => {\n        console.log("Survey submitted:", responses);\n        return responses;\n      },\n    });\n  });\n')),(0,a.yg)("h2",{id:"important-implementation-notes"},"Important Implementation Notes"),(0,a.yg)("ol",null,(0,a.yg)("li",{parentName:"ol"},(0,a.yg)("p",{parentName:"li"},(0,a.yg)("strong",{parentName:"p"},"SurveyReader Updates"),": The SurveyReader component has no method to update survey data after initialization. You must destroy the existing instance and create a new one to change the survey.")),(0,a.yg)("li",{parentName:"ol"},(0,a.yg)("p",{parentName:"li"},(0,a.yg)("strong",{parentName:"p"},"SurveyBuilder Methods"),": The builder provides ",(0,a.yg)("inlineCode",{parentName:"p"},"getData()"),", ",(0,a.yg)("inlineCode",{parentName:"p"},"setData()"),", ",(0,a.yg)("inlineCode",{parentName:"p"},"save()"),", ",(0,a.yg)("inlineCode",{parentName:"p"},"reset()"),", and ",(0,a.yg)("inlineCode",{parentName:"p"},"destroy()")," methods for managing surveys.")),(0,a.yg)("li",{parentName:"ol"},(0,a.yg)("p",{parentName:"li"},(0,a.yg)("strong",{parentName:"p"},"Event Handling"),": The SurveyReader component dispatches a custom event (",(0,a.yg)("inlineCode",{parentName:"p"},"survey-submit"),") when a survey is submitted that you can listen for."))),(0,a.yg)("h2",{id:"whats-next"},"What's Next?"),(0,a.yg)("p",null,"Now that you've created your first survey, you can:"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},"Explore the ",(0,a.yg)("a",{parentName:"li",href:"/shadow-dom-survey/docs/api/overview"},"API Reference")," for complete details on all options and methods"),(0,a.yg)("li",{parentName:"ul"},"Learn about different ",(0,a.yg)("a",{parentName:"li",href:"/shadow-dom-survey/docs/question-types/single-line-text"},"Question Types")," and their capabilities"),(0,a.yg)("li",{parentName:"ul"},"Integrate the components with your existing application")),(0,a.yg)("h2",{id:"troubleshooting"},"Troubleshooting"),(0,a.yg)("p",null,"If you encounter any issues:"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},"Check the browser console for error messages"),(0,a.yg)("li",{parentName:"ul"},"Verify that your component containers exist in the DOM"),(0,a.yg)("li",{parentName:"ul"},"Make sure you're using the correct methods according to each component's actual implementation"),(0,a.yg)("li",{parentName:"ul"},"Remember that SurveyReader instances must be destroyed and recreated to update survey data")))}y.isMDXComponent=!0}}]);