"use strict";(self.webpackChunkshadow_dom_survey_docs=self.webpackChunkshadow_dom_survey_docs||[]).push([[982],{5680:(e,n,t)=>{t.d(n,{xA:()=>d,yg:()=>m});var r=t(6540);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var l=r.createContext({}),u=function(e){var n=r.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},d=function(e){var n=u(e.components);return r.createElement(l.Provider,{value:n},e.children)},p="mdxType",y={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},g=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,o=e.originalType,l=e.parentName,d=s(e,["components","mdxType","originalType","parentName"]),p=u(t),g=a,m=p["".concat(l,".").concat(g)]||p[g]||y[g]||o;return t?r.createElement(m,i(i({ref:n},d),{},{components:t})):r.createElement(m,i({ref:n},d))}));function m(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var o=t.length,i=new Array(o);i[0]=g;var s={};for(var l in n)hasOwnProperty.call(n,l)&&(s[l]=n[l]);s.originalType=e,s[p]="string"==typeof e?e:a,i[1]=s;for(var u=2;u<o;u++)i[u]=t[u];return r.createElement.apply(null,i)}return r.createElement.apply(null,t)}g.displayName="MDXCreateElement"},7213:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>i,default:()=>y,frontMatter:()=>o,metadata:()=>s,toc:()=>u});var r=t(8168),a=(t(6540),t(5680));const o={sidebar_position:2},i="Survey Reader Component",s={unversionedId:"components/survey-reader",id:"components/survey-reader",title:"Survey Reader Component",description:"The Survey Reader component displays surveys to end-users and collects their responses. Like the builder, it's fully encapsulated using Shadow DOM to ensure consistent rendering regardless of your website's styles.",source:"@site/docs/components/survey-reader.md",sourceDirName:"components",slug:"/components/survey-reader",permalink:"/shadow-dom-survey/docs/components/survey-reader",draft:!1,editUrl:"https://github.com/SKoRSA/shadow-dom-survey/edit/main/docs/docs/components/survey-reader.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"docs",previous:{title:"Survey Builder Component",permalink:"/shadow-dom-survey/docs/components/survey-builder"},next:{title:"Single Line Text Questions",permalink:"/shadow-dom-survey/docs/question-types/single-line-text"}},l={},u=[{value:"Interactive Demo",id:"interactive-demo",level:2},{value:"Basic Usage",id:"basic-usage",level:2},{value:"Configurable Options",id:"configurable-options",level:2},{value:"Methods",id:"methods",level:2},{value:"destroy()",id:"destroy",level:3},{value:"Events",id:"events",level:2},{value:"Customizable Demo (Run Your Own)",id:"customizable-demo-run-your-own",level:2},{value:"index.html",id:"indexhtml",level:3}],d={toc:u},p="wrapper";function y({components:e,...n}){return(0,a.yg)(p,(0,r.A)({},d,n,{components:e,mdxType:"MDXLayout"}),(0,a.yg)("h1",{id:"survey-reader-component"},"Survey Reader Component"),(0,a.yg)("p",null,"The Survey Reader component displays surveys to end-users and collects their responses. Like the builder, it's fully encapsulated using Shadow DOM to ensure consistent rendering regardless of your website's styles."),(0,a.yg)("h2",{id:"interactive-demo"},"Interactive Demo"),(0,a.yg)("p",null,"The following interactive demo allows you to try the Survey Reader component directly:"),(0,a.yg)("div",{className:"demo-container"},(0,a.yg)("iframe",{src:"/shadow-dom-survey/demos/reader.html",width:"100%",height:"600px",frameBorder:"0",title:"Survey Reader Demo"})),(0,a.yg)("h2",{id:"basic-usage"},"Basic Usage"),(0,a.yg)("p",null,"To use the Survey Reader in your website:"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-html"},'\x3c!-- Container for the reader --\x3e\n<div id="surveyReader"></div>\n\n\x3c!-- Include the script --\x3e\n<script src="path/to/reader-embed.js"><\/script>\n\n\x3c!-- Initialize the reader --\x3e\n<script>\n  const reader = new SurveyReader("#surveyReader", {\n    isEnglish: true,\n    surveyData: {\n      title: "Customer Feedback",\n      description: "Please share your experience",\n      question: {\n        type: "singleChoice",\n        text: "How would you rate our service?",\n        settings: { required: true },\n        options: ["Excellent", "Good", "Average", "Poor"],\n      },\n    },\n    onSubmit: async (responses) => {\n      console.log("Survey responses:", responses);\n      return responses;\n    },\n  });\n<\/script>\n')),(0,a.yg)("h2",{id:"configurable-options"},"Configurable Options"),(0,a.yg)("p",null,"The Survey Reader accepts the following configuration options:"),(0,a.yg)("table",null,(0,a.yg)("thead",{parentName:"table"},(0,a.yg)("tr",{parentName:"thead"},(0,a.yg)("th",{parentName:"tr",align:null},"Option"),(0,a.yg)("th",{parentName:"tr",align:null},"Type"),(0,a.yg)("th",{parentName:"tr",align:null},"Default"),(0,a.yg)("th",{parentName:"tr",align:null},"Description"))),(0,a.yg)("tbody",{parentName:"table"},(0,a.yg)("tr",{parentName:"tbody"},(0,a.yg)("td",{parentName:"tr",align:null},(0,a.yg)("inlineCode",{parentName:"td"},"isEnglish")),(0,a.yg)("td",{parentName:"tr",align:null},"Boolean"),(0,a.yg)("td",{parentName:"tr",align:null},(0,a.yg)("inlineCode",{parentName:"td"},"true")),(0,a.yg)("td",{parentName:"tr",align:null},"Set to ",(0,a.yg)("inlineCode",{parentName:"td"},"false")," for Arabic UI")),(0,a.yg)("tr",{parentName:"tbody"},(0,a.yg)("td",{parentName:"tr",align:null},(0,a.yg)("inlineCode",{parentName:"td"},"surveyData")),(0,a.yg)("td",{parentName:"tr",align:null},"Object"),(0,a.yg)("td",{parentName:"tr",align:null},(0,a.yg)("inlineCode",{parentName:"td"},"null")),(0,a.yg)("td",{parentName:"tr",align:null},"Survey data to display immediately")),(0,a.yg)("tr",{parentName:"tbody"},(0,a.yg)("td",{parentName:"tr",align:null},(0,a.yg)("inlineCode",{parentName:"td"},"loadSurvey")),(0,a.yg)("td",{parentName:"tr",align:null},"Function"),(0,a.yg)("td",{parentName:"tr",align:null},(0,a.yg)("inlineCode",{parentName:"td"},"async () => null")),(0,a.yg)("td",{parentName:"tr",align:null},"Function to load survey data asynchronously")),(0,a.yg)("tr",{parentName:"tbody"},(0,a.yg)("td",{parentName:"tr",align:null},(0,a.yg)("inlineCode",{parentName:"td"},"onSubmit")),(0,a.yg)("td",{parentName:"tr",align:null},"Function"),(0,a.yg)("td",{parentName:"tr",align:null},(0,a.yg)("inlineCode",{parentName:"td"},"async (responses) => responses")),(0,a.yg)("td",{parentName:"tr",align:null},"Callback when survey is submitted")),(0,a.yg)("tr",{parentName:"tbody"},(0,a.yg)("td",{parentName:"tr",align:null},(0,a.yg)("inlineCode",{parentName:"td"},"completedTitle")),(0,a.yg)("td",{parentName:"tr",align:null},"String"),(0,a.yg)("td",{parentName:"tr",align:null},'"Thank you!"'),(0,a.yg)("td",{parentName:"tr",align:null},"Title shown after submission")),(0,a.yg)("tr",{parentName:"tbody"},(0,a.yg)("td",{parentName:"tr",align:null},(0,a.yg)("inlineCode",{parentName:"td"},"completedMessage")),(0,a.yg)("td",{parentName:"tr",align:null},"String"),(0,a.yg)("td",{parentName:"tr",align:null},'"Thank you for completing the survey!"'),(0,a.yg)("td",{parentName:"tr",align:null},"Message after submission")),(0,a.yg)("tr",{parentName:"tbody"},(0,a.yg)("td",{parentName:"tr",align:null},(0,a.yg)("inlineCode",{parentName:"td"},"submitButtonText")),(0,a.yg)("td",{parentName:"tr",align:null},"String"),(0,a.yg)("td",{parentName:"tr",align:null},'"Submit"'),(0,a.yg)("td",{parentName:"tr",align:null},"Label for the submit button")),(0,a.yg)("tr",{parentName:"tbody"},(0,a.yg)("td",{parentName:"tr",align:null},(0,a.yg)("inlineCode",{parentName:"td"},"requiredFieldMessage")),(0,a.yg)("td",{parentName:"tr",align:null},"String"),(0,a.yg)("td",{parentName:"tr",align:null},'"This question requires an answer"'),(0,a.yg)("td",{parentName:"tr",align:null},"Error message for required fields")),(0,a.yg)("tr",{parentName:"tbody"},(0,a.yg)("td",{parentName:"tr",align:null},(0,a.yg)("inlineCode",{parentName:"td"},"animation")),(0,a.yg)("td",{parentName:"tr",align:null},"Boolean"),(0,a.yg)("td",{parentName:"tr",align:null},(0,a.yg)("inlineCode",{parentName:"td"},"true")),(0,a.yg)("td",{parentName:"tr",align:null},"Enable/disable animations")))),(0,a.yg)("h2",{id:"methods"},"Methods"),(0,a.yg)("h3",{id:"destroy"},"destroy()"),(0,a.yg)("p",null,"Removes the component and cleans up."),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-javascript"},"reader.destroy();\n")),(0,a.yg)("blockquote",null,(0,a.yg)("p",{parentName:"blockquote"},(0,a.yg)("strong",{parentName:"p"},"Important:")," To update survey data, you must destroy the current instance and create a new one with new data."),(0,a.yg)("p",{parentName:"blockquote"},"The SurveyReader component does not have a method to update the survey data after initialization."),(0,a.yg)("pre",{parentName:"blockquote"},(0,a.yg)("code",{parentName:"pre",className:"language-javascript"},'// To change survey data:\nreader.destroy();\nreader = new SurveyReader("#surveyReader", {\n  isEnglish: true,\n  surveyData: {\n    title: "New Survey Title",\n    description: "New description",\n    question: {\n      /* ... */\n    },\n  },\n  onSubmit: async (responses) => {\n    console.log("Responses:", responses);\n    return responses;\n  },\n});\n'))),(0,a.yg)("h2",{id:"events"},"Events"),(0,a.yg)("p",null,"The reader dispatches a custom event:"),(0,a.yg)("table",null,(0,a.yg)("thead",{parentName:"table"},(0,a.yg)("tr",{parentName:"thead"},(0,a.yg)("th",{parentName:"tr",align:null},"Event Name"),(0,a.yg)("th",{parentName:"tr",align:null},"Description"),(0,a.yg)("th",{parentName:"tr",align:null},"Details"))),(0,a.yg)("tbody",{parentName:"table"},(0,a.yg)("tr",{parentName:"tbody"},(0,a.yg)("td",{parentName:"tr",align:null},(0,a.yg)("inlineCode",{parentName:"td"},"survey-submit")),(0,a.yg)("td",{parentName:"tr",align:null},"Fires when survey is submitted"),(0,a.yg)("td",{parentName:"tr",align:null},"Contains the response data")))),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-javascript"},'document\n  .querySelector("#surveyReader")\n  .addEventListener("survey-submit", (event) => {\n    console.log("Survey submitted:", event.detail);\n  });\n')),(0,a.yg)("h2",{id:"customizable-demo-run-your-own"},"Customizable Demo (Run Your Own)"),(0,a.yg)("p",null,"Create the following files to run your own customizable demo:"),(0,a.yg)("h3",{id:"indexhtml"},"index.html"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-html"},'<!DOCTYPE html>\n<html lang="en">\n  <head>\n    <meta charset="UTF-8" />\n    <meta name="viewport" content="width=device-width, initial-scale=1.0" />\n    <title>Survey Reader Demo</title>\n    <style>\n      body {\n        font-family: system-ui, -apple-system, sans-serif;\n        max-width: 1000px;\n        margin: 0 auto;\n        padding: 20px;\n      }\n\n      .demo-container {\n        border: 1px solid #e0e0e0;\n        border-radius: 8px;\n        padding: 20px;\n        margin-bottom: 30px;\n      }\n\n      .controls {\n        background: #f5f5f5;\n        padding: 15px;\n        border-radius: 6px;\n        margin-bottom: 20px;\n      }\n\n      .controls label {\n        display: block;\n        margin-bottom: 10px;\n      }\n\n      .controls select {\n        margin-bottom: 15px;\n        padding: 8px;\n        border-radius: 4px;\n        border: 1px solid #ddd;\n        width: 100%;\n        max-width: 400px;\n      }\n\n      button {\n        background: #4a6cf7;\n        color: white;\n        border: none;\n        padding: 8px 16px;\n        border-radius: 4px;\n        cursor: pointer;\n        margin-right: 10px;\n      }\n\n      pre {\n        background: #f0f0f0;\n        padding: 15px;\n        border-radius: 4px;\n        overflow: auto;\n        max-height: 200px;\n      }\n    </style>\n  </head>\n  <body>\n    <h1>Survey Reader Demo</h1>\n\n    <div class="controls">\n      <label>\n        <input type="checkbox" id="arabicToggle" /> Arabic Interface\n      </label>\n\n      <label>\n        Survey Type:\n        <select id="surveyTypeSelect">\n          <option value="singleChoice">Single Choice</option>\n          <option value="multipleChoice">Multiple Choice</option>\n          <option value="singleText">Single Line Text</option>\n          <option value="longText">Multi-line Text</option>\n          <option value="rating">Rating</option>\n          <option value="dropdown">Dropdown</option>\n          <option value="matrix">Matrix</option>\n        </select>\n      </label>\n\n      <button id="loadSurveyBtn">Load Sample Survey</button>\n    </div>\n\n    <div class="demo-container">\n      <div id="surveyReader"></div>\n    </div>\n\n    <h3>Submission Results:</h3>\n    <pre id="resultsOutput">No submissions yet</pre>\n\n    <script src="reader-embed.js"><\/script>\n    <script>\n      // Sample surveys for each type\n      const sampleSurveys = {\n        singleChoice: {\n          title: "Customer Satisfaction",\n          description: "Please rate your experience",\n          question: {\n            type: "singleChoice",\n            text: "How satisfied are you with our service?",\n            settings: { required: true },\n            options: [\n              "Very Satisfied",\n              "Satisfied",\n              "Neutral",\n              "Dissatisfied",\n              "Very Dissatisfied",\n            ],\n          },\n        },\n        multipleChoice: {\n          title: "Feature Preferences",\n          description: "Help us prioritize our roadmap",\n          question: {\n            type: "multipleChoice",\n            text: "Which features would you like to see improved?",\n            settings: { required: true },\n            options: [\n              "User Interface",\n              "Performance",\n              "Reliability",\n              "Documentation",\n              "Mobile Support",\n            ],\n          },\n        },\n        singleText: {\n          title: "Contact Information",\n          description: "Please provide your email",\n          question: {\n            type: "singleText",\n            text: "What is your email address?",\n            settings: {\n              required: true,\n              placeholder: "example@domain.com",\n            },\n          },\n        },\n        longText: {\n          title: "User Feedback",\n          description: "Share your thoughts with us",\n          question: {\n            type: "longText",\n            text: "What improvements would you suggest for our product?",\n            settings: {\n              required: true,\n              placeholder: "Please be as specific as possible...",\n            },\n          },\n        },\n        rating: {\n          title: "Product Rating",\n          description: "Rate our product",\n          question: {\n            type: "rating",\n            text: "How likely are you to recommend our product to others?",\n            settings: {\n              required: true,\n              maxValue: 10,\n            },\n          },\n        },\n        dropdown: {\n          title: "User Demographics",\n          description: "Help us understand our users better",\n          question: {\n            type: "dropdown",\n            text: "What is your primary role?",\n            settings: { required: true },\n            options: [\n              "Developer",\n              "Designer",\n              "Product Manager",\n              "Business Analyst",\n              "Student",\n              "Other",\n            ],\n          },\n        },\n        matrix: {\n          title: "Product Evaluation",\n          description: "Rate different aspects of our product",\n          question: {\n            type: "matrix",\n            text: "Please rate the following aspects of our product:",\n            settings: { required: true },\n            rows: [\n              "Ease of use",\n              "Performance",\n              "Reliability",\n              "Value for money",\n              "Customer support",\n            ],\n            columns: ["Poor", "Fair", "Good", "Very Good", "Excellent"],\n          },\n        },\n      };\n\n      // Initialize the reader\n      let reader = new SurveyReader("#surveyReader", {\n        isEnglish: true,\n        surveyData: sampleSurveys.singleChoice,\n        onSubmit: async (responses) => {\n          document.getElementById("resultsOutput").textContent = JSON.stringify(\n            responses,\n            null,\n            2\n          );\n          return responses;\n        },\n      });\n\n      // Handle language toggle\n      document\n        .getElementById("arabicToggle")\n        .addEventListener("change", function (e) {\n          // Destroy and recreate with new language setting\n          reader.destroy();\n          reader = new SurveyReader("#surveyReader", {\n            isEnglish: !e.target.checked,\n            surveyData:\n              sampleSurveys[document.getElementById("surveyTypeSelect").value],\n            onSubmit: async (responses) => {\n              document.getElementById("resultsOutput").textContent =\n                JSON.stringify(responses, null, 2);\n              return responses;\n            },\n          });\n        });\n\n      // Handle load survey button\n      document\n        .getElementById("loadSurveyBtn")\n        .addEventListener("click", function () {\n          const surveyType = document.getElementById("surveyTypeSelect").value;\n          reader.destroy();\n          reader = new SurveyReader("#surveyReader", {\n            isEnglish: document.getElementById("arabicToggle").checked\n              ? false\n              : true,\n            surveyData: sampleSurveys[surveyType],\n            onSubmit: async (responses) => {\n              document.getElementById("resultsOutput").textContent =\n                JSON.stringify(responses, null, 2);\n              return responses;\n            },\n          });\n          document.getElementById("resultsOutput").textContent =\n            "No submissions yet";\n        });\n    <\/script>\n  </body>\n</html>\n')),(0,a.yg)("p",null,"Copy the reader-embed.js file to the same directory and open the HTML file to run your own configurable demo."))}y.isMDXComponent=!0}}]);