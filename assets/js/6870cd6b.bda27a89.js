"use strict";(self.webpackChunkshadow_dom_survey_docs=self.webpackChunkshadow_dom_survey_docs||[]).push([[717],{871:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>a,default:()=>d,frontMatter:()=>i,metadata:()=>s,toc:()=>u});var r=n(8168),o=(n(6540),n(5680));const i={sidebar_position:4},a="Multiple Choice Questions",s={unversionedId:"question-types/multiple-choice",id:"question-types/multiple-choice",title:"Multiple Choice Questions",description:'Multiple choice questions allow respondents to select one or more options from a predefined list. This question type is ideal for scenarios where multiple selections are valid, such as "Select all that apply" questions.',source:"@site/docs/question-types/multiple-choice.md",sourceDirName:"question-types",slug:"/question-types/multiple-choice",permalink:"/shadow-dom-survey/docs/question-types/multiple-choice",draft:!1,editUrl:"https://github.com/SKoRSA/shadow-dom-survey/edit/main/docs/docs/question-types/multiple-choice.md",tags:[],version:"current",sidebarPosition:4,frontMatter:{sidebar_position:4},sidebar:"docs",previous:{title:"Single Choice Questions",permalink:"/shadow-dom-survey/docs/question-types/single-choice"},next:{title:"Dropdown Questions",permalink:"/shadow-dom-survey/docs/question-types/dropdown"}},l={},u=[{value:"Features",id:"features",level:2},{value:"Data Structure",id:"data-structure",level:2},{value:"Builder Configuration",id:"builder-configuration",level:2},{value:"Reader Display",id:"reader-display",level:2},{value:"Response Format",id:"response-format",level:2},{value:"Implementation Example",id:"implementation-example",level:2},{value:"Setting Up in the Builder",id:"setting-up-in-the-builder",level:3},{value:"Setting Up the Reader",id:"setting-up-the-reader",level:3},{value:"HTML Structure (Inside Shadow DOM)",id:"html-structure-inside-shadow-dom",level:3},{value:"Best Practices",id:"best-practices",level:2}],p={toc:u},c="wrapper";function d({components:e,...t}){return(0,o.yg)(c,(0,r.A)({},p,t,{components:e,mdxType:"MDXLayout"}),(0,o.yg)("h1",{id:"multiple-choice-questions"},"Multiple Choice Questions"),(0,o.yg)("p",null,'Multiple choice questions allow respondents to select one or more options from a predefined list. This question type is ideal for scenarios where multiple selections are valid, such as "Select all that apply" questions.'),(0,o.yg)("h2",{id:"features"},"Features"),(0,o.yg)("ul",null,(0,o.yg)("li",{parentName:"ul"},"Checkbox-based selection for multiple answers"),(0,o.yg)("li",{parentName:"ul"},"Visual feedback when options are selected"),(0,o.yg)("li",{parentName:"ul"},"Required validation (checks if at least one option is selected)"),(0,o.yg)("li",{parentName:"ul"},"Interactive option styling"),(0,o.yg)("li",{parentName:"ul"},"Support for any number of options")),(0,o.yg)("h2",{id:"data-structure"},"Data Structure"),(0,o.yg)("p",null,"When creating or using this question type with the Shadow DOM Survey components, the data structure is:"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-javascript"},'{\n  "surveyId": "uniqueId123",\n  "title": "Product Feature Survey",\n  "description": "Help us prioritize our development roadmap",\n  "createdAt": "2023-07-10T15:30:45.123Z",\n  "updatedAt": "2023-07-10T16:45:12.456Z",\n  "question": {\n    "type": "multipleChoice",\n    "text": "Which features would you like to see in our next release?",\n    "settings": {\n      "required": true\n    },\n    "options": [\n      "Improved user interface",\n      "Faster performance",\n      "Mobile app support",\n      "More customization options",\n      "Integration with other tools",\n      "Better documentation"\n    ]\n  }\n}\n')),(0,o.yg)("h2",{id:"builder-configuration"},"Builder Configuration"),(0,o.yg)("p",null,"In the Survey Builder interface, you can configure multiple choice questions with these settings:"),(0,o.yg)("ol",null,(0,o.yg)("li",{parentName:"ol"},(0,o.yg)("strong",{parentName:"li"},"Question Text"),": The main question prompt (required)"),(0,o.yg)("li",{parentName:"ol"},(0,o.yg)("strong",{parentName:"li"},"Required"),": Toggle whether at least one option must be selected"),(0,o.yg)("li",{parentName:"ol"},(0,o.yg)("strong",{parentName:"li"},"Options"),": Add, remove, and edit the available choices")),(0,o.yg)("p",null,"The builder interface provides:"),(0,o.yg)("ul",null,(0,o.yg)("li",{parentName:"ul"},"Button to add new options"),(0,o.yg)("li",{parentName:"ul"},"Remove buttons for each existing option"),(0,o.yg)("li",{parentName:"ul"},"Drag handles to reorder options (where supported)")),(0,o.yg)("h2",{id:"reader-display"},"Reader Display"),(0,o.yg)("p",null,"In the Survey Reader, multiple choice questions display as:"),(0,o.yg)("ul",null,(0,o.yg)("li",{parentName:"ul"},"Question text at the top"),(0,o.yg)("li",{parentName:"ul"},"List of options with checkboxes"),(0,o.yg)("li",{parentName:"ul"},"Visual feedback when options are selected/deselected"),(0,o.yg)("li",{parentName:"ul"},"Validation message if required and no option is selected")),(0,o.yg)("h2",{id:"response-format"},"Response Format"),(0,o.yg)("p",null,"The response data for multiple choice questions is structured as follows:"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-javascript"},'{\n  "surveyId": "survey123",\n  "submittedAt": "2023-07-15T14:32:45.123Z",\n  "questionType": "multipleChoice",\n  "questionText": "Which features would you like to see in our next release?",\n  "response": [\n    "Improved user interface",\n    "Mobile app support",\n    "Integration with other tools"\n  ]\n}\n')),(0,o.yg)("h2",{id:"implementation-example"},"Implementation Example"),(0,o.yg)("h3",{id:"setting-up-in-the-builder"},"Setting Up in the Builder"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-javascript"},'// Create a new builder instance\nconst builder = new SurveyBuilder("#surveyBuilder", {\n  isEnglish: true,\n  onSave: async (data) => {\n    console.log("Survey saved:", data);\n    return data;\n  },\n});\n\n// Create a multiple choice question programmatically\nbuilder.setData({\n  surveyId: "survey_" + Date.now().toString(36),\n  title: "User Preferences Survey",\n  description: "Help us understand how you use our product",\n  createdAt: new Date().toISOString(),\n  updatedAt: new Date().toISOString(),\n  question: {\n    type: "multipleChoice",\n    text: "Which of the following devices do you use to access our service? (Select all that apply)",\n    settings: {\n      required: true,\n    },\n    options: [\n      "Desktop/laptop computer",\n      "Smartphone",\n      "Tablet",\n      "Smart TV",\n      "Gaming console",\n      "Other",\n    ],\n  },\n});\n')),(0,o.yg)("h3",{id:"setting-up-the-reader"},"Setting Up the Reader"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-javascript"},'// Create a new reader instance with the multiple choice survey data\nconst reader = new SurveyReader("#surveyReader", {\n  isEnglish: true,\n  surveyData: {\n    surveyId: "survey_" + Date.now().toString(36),\n    title: "User Preferences Survey",\n    description: "Help us understand how you use our product",\n    question: {\n      type: "multipleChoice",\n      text: "Which of the following devices do you use to access our service? (Select all that apply)",\n      settings: {\n        required: true,\n      },\n      options: [\n        "Desktop/laptop computer",\n        "Smartphone",\n        "Tablet",\n        "Smart TV",\n        "Gaming console",\n        "Other",\n      ],\n    },\n  },\n  onSubmit: async (responses) => {\n    console.log("Survey submitted:", responses);\n    return responses;\n  },\n});\n\n// To update the reader with different data, you must destroy and recreate it\nreader.destroy();\nconst updatedReader = new SurveyReader("#surveyReader", {\n  isEnglish: true,\n  surveyData: newMultipleChoiceSurveyData,\n  onSubmit: async (responses) => {\n    console.log("Updated survey submitted:", responses);\n    return responses;\n  },\n});\n')),(0,o.yg)("h3",{id:"html-structure-inside-shadow-dom"},"HTML Structure (Inside Shadow DOM)"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-html"},'<div class="question">\n  <div class="question-text">\n    Which of the following devices do you use to access our service? (Select all\n    that apply)<span class="required">*</span>\n  </div>\n  <div class="options">\n    <label class="option">\n      <input type="checkbox" name="sr-response-checkbox" value="0" />\n      Desktop/laptop computer\n    </label>\n    <label class="option">\n      <input type="checkbox" name="sr-response-checkbox" value="1" />\n      Smartphone\n    </label>\n    \x3c!-- Additional options... --\x3e\n  </div>\n  <div id="sr-question-error" style="display: none;">\n    This question requires at least one selection\n  </div>\n</div>\n')),(0,o.yg)("h2",{id:"best-practices"},"Best Practices"),(0,o.yg)("ol",null,(0,o.yg)("li",{parentName:"ol"},(0,o.yg)("strong",{parentName:"li"},"Clear instructions"),': Explicitly state that multiple selections are allowed (e.g., "Select all that apply")'),(0,o.yg)("li",{parentName:"ol"},(0,o.yg)("strong",{parentName:"li"},"Manageable options"),": Keep the list of options reasonable (typically 3-7 options)"),(0,o.yg)("li",{parentName:"ol"},(0,o.yg)("strong",{parentName:"li"},"Logical ordering"),": Order options logically (alphabetical, popularity, or another meaningful sequence)"),(0,o.yg)("li",{parentName:"ol"},(0,o.yg)("strong",{parentName:"li"},"Mutually exclusive options"),": Ensure options don't overlap conceptually"),(0,o.yg)("li",{parentName:"ol"},(0,o.yg)("strong",{parentName:"li"},'Include "Other" when appropriate'),': Consider adding an "Other" option if your list might not be exhaustive'),(0,o.yg)("li",{parentName:"ol"},(0,o.yg)("strong",{parentName:"li"},"Visual feedback"),": The component provides visual highlighting for selected options"),(0,o.yg)("li",{parentName:"ol"},(0,o.yg)("strong",{parentName:"li"},"Mobile-friendly"),": The component design ensures options are easy to select on touch devices")))}d.isMDXComponent=!0},5680:(e,t,n)=>{n.d(t,{xA:()=>p,yg:()=>m});var r=n(6540);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var l=r.createContext({}),u=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},p=function(e){var t=u(e.components);return r.createElement(l.Provider,{value:t},e.children)},c="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},y=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,i=e.originalType,l=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),c=u(n),y=o,m=c["".concat(l,".").concat(y)]||c[y]||d[y]||i;return n?r.createElement(m,a(a({ref:t},p),{},{components:n})):r.createElement(m,a({ref:t},p))}));function m(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var i=n.length,a=new Array(i);a[0]=y;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[c]="string"==typeof e?e:o,a[1]=s;for(var u=2;u<i;u++)a[u]=n[u];return r.createElement.apply(null,a)}return r.createElement.apply(null,n)}y.displayName="MDXCreateElement"}}]);